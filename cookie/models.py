# generated by datamodel-codegen:
#   filename:  http://localhost:8000/openapi.json
#   timestamp: 2025-04-03T20:08:21+00:00

from __future__ import annotations

from datetime import datetime
from typing import Dict, List, Optional, Union

from pydantic import BaseModel, Field


class GuildActivity(BaseModel):
    msg_activity: dict[str, int] = Field(..., title="Msg Activity")
    voice_activity: dict[str, int] = Field(..., title="Voice Activity")
    msg_count: int = Field(..., title="Msg Count")
    voice_min: int = Field(..., title="Voice Min")
    top_channel: int | None = Field(..., title="Top Channel")
    top_channel_messages: int = Field(..., title="Top Channel Messages")
    most_active_user_day: int | None = Field(..., title="Most Active User Day")
    most_active_user_hour: int | None = Field(..., title="Most Active User Hour")


class GuildStats(BaseModel):
    members: dict[str, int] = Field(..., title="Members")
    boosts: dict[str, int] = Field(..., title="Boosts")


class MemberActivity(BaseModel):
    msg_activity: dict[str, int] = Field(..., title="Msg Activity")
    voice_activity: dict[str, int] = Field(..., title="Voice Activity")
    msg_count: int = Field(..., title="Msg Count")
    voice_min: int = Field(..., title="Voice Min")
    msg_rank: int = Field(..., title="Msg Rank")
    voice_rank: int = Field(..., title="Voice Rank")
    current_voice_min: int = Field(..., title="Current Voice Min")


class Steals(BaseModel):
    total: int = Field(..., title="Total")
    users: int = Field(..., title="Users")
    successful: int = Field(..., title="Successful")
    cookies_gained: int = Field(..., title="Cookies Gained")
    cookies_lost: int = Field(..., title="Cookies Lost")


class TextLevel(BaseModel):
    msg: int = Field(..., title="Msg")
    xp: int = Field(..., title="Xp")
    level: int = Field(..., title="Level")
    current_level_progress: int = Field(..., title="Current Level Progress")
    current_level_end: int = Field(..., title="Current Level End")
    rank: int = Field(..., title="Rank")
    total_members: int = Field(..., title="Total Members")


class ValidationError(BaseModel):
    loc: list[str | int] = Field(..., title="Location")
    msg: str = Field(..., title="Message")
    type: str = Field(..., title="Error Type")


class VoiceLevel(BaseModel):
    minutes: int = Field(..., title="Minutes")
    xp: int = Field(..., title="Xp")
    level: int = Field(..., title="Level")
    rank: int = Field(..., title="Rank")
    total_members: int = Field(..., title="Total Members")
    streak_days: int = Field(..., title="Streak Days")
    cur_voice_min: int = Field(..., title="Cur Voice Min")
    max_voice_min: int = Field(..., title="Max Voice Min")


class Work(BaseModel):
    career: str = Field(..., title="Career")
    total_shifts: int = Field(..., title="Total Shifts")
    current_shifts: int = Field(..., title="Current Shifts")
    job: str = Field(..., title="Job")
    job_level: int = Field(..., title="Job Level")
    job_ready: bool = Field(..., title="Job Ready")


class HTTPValidationError(BaseModel):
    detail: list[ValidationError] | None = Field(None, title="Detail")


class MemberStats(BaseModel):
    level: TextLevel
    voice: VoiceLevel
    greetings: int = Field(..., title="Greetings")
    boost_days: int = Field(..., title="Boost Days")
    profile_url: str = Field(..., title="Profile Url")


class UserStats(BaseModel):
    max_streak: int = Field(..., title="Max Streak")
    streak: int = Field(..., title="Streak")
    cookies: int = Field(..., title="Cookies")
    job: Work
    oven_ready: bool = Field(..., title="Oven Ready")
    oven_next: datetime = Field(..., title="Oven Next")
    daily_ready: bool = Field(..., title="Daily Ready")
    daily_next: datetime = Field(..., title="Daily Next")
    steals: Steals
    total_parties: int = Field(..., title="Total Parties")
    cookie_jar_coins: int = Field(..., title="Cookie Jar Coins")
    cookie_master_coins: int = Field(..., title="Cookie Master Coins")
    fortune_cookies: int = Field(..., title="Fortune Cookies")
    cookies_given: int = Field(..., title="Cookies Given")
    profile_url: str = Field(..., title="Profile Url")
    cookie_history: dict[str, int] = Field(..., title="Cookie History")
